{"version":3,"sources":["utility/squareObj.js","utility/gameChecker.js","contexts/square-context.js","components/game-square/square.jsx","components/game-board/board.jsx","components/history-board/history-board.jsx","App.js","serviceWorker.js","index.js"],"names":["SquareValue","value","key","i","j","isSelected","equal","orther","isSameValue","isComponentValue","this","Checker","check","squareValue","squares","checkSubDiagonal","length","checkCol","checkRow","checkMainDiagonal","twoHeadBlock","count","x","arr","y","squareContext","React","createContext","onSquareClick","square","Square","props","state","squareObj","style","mark","Consumer","context","type","className","onClick","Component","Board","renderSquare","renderRow","squareRow","map","player","historyBoard","arrange","step","current","backToStep","App","getBlankBoard","Array","fill","init","boardSquares","setState","win","history","checkWin","result","newBoard","square1","sq","forEach","r","select","handleClick","squaresBoard","squareM","s","currentStep","newHis","slice","location","newBoardHistory","lo","boardRow","newSquare","back","forward","render","arrangeAsend","Provider","Boolean","window","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.11205526.chunk.js","sourcesContent":["class SquareValue {\r\n    value = 0;\r\n\r\n    key = 0;\r\n\r\n    i = 0;\r\n\r\n    j = 0;\r\n\r\n    isSelected=false;\r\n\r\n    constructor(value, key, i, j) {\r\n        this.value = value;\r\n        this.key = key;\r\n        this.i = i;\r\n        this.j = j;\r\n    }\r\n\r\n    select(){\r\n        this.isSelected=true;\r\n    }\r\n\r\n    equal = (orther) => {\r\n        if (orther.key === this.key) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    isSameValue = (orther) => {\r\n        if (orther.value === this.value) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    \r\n    isComponentValue = (orther) => {\r\n        if (orther.value !== this.value && orther.value !== 0) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n}\r\nexport default SquareValue;","\r\nclass Checker {\r\n    static check = (squareValue, squares) => {\r\n        if (this.checkSubDiagonal(squareValue, squares).length > 0) {\r\n            return this.checkSubDiagonal(squareValue, squares)\r\n        }\r\n        if (this.checkCol(squareValue, squares).length > 0) {\r\n            return this.checkCol(squareValue, squares)\r\n        }\r\n        if (this.checkRow(squareValue, squares).length > 0) {\r\n            return this.checkRow(squareValue, squares)\r\n        }\r\n        if (this.checkMainDiagonal(squareValue, squares).length > 0) {\r\n            return this.checkMainDiagonal(squareValue, squares)\r\n        }\r\n        return [];\r\n    }\r\n\r\n    static checkCol = (squareValue, squares) => {\r\n        // console.log('Square value', squareValue);\r\n        let twoHeadBlock = false;\r\n        let count = 1;\r\n        let x = squareValue.i + 1;\r\n        let arr = [];\r\n        while (x < 20) {\r\n            if (squareValue.isSameValue(squares[x][squareValue.j])) {\r\n                count+=1;\r\n                x+=1;\r\n                arr = [...arr, squares[x][squareValue.j]]\r\n            } else {\r\n                // console.log(squares[x][squareValue.j].value);\r\n                if (squares[x][squareValue.j].value !== 0) {\r\n                    twoHeadBlock = true;\r\n                    // console.log('Block 1');\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        x = squareValue.i - 1;\r\n        while (x >= 0) {\r\n            const value = squares[x][squareValue.j];\r\n            if (squareValue.isSameValue(value)) {\r\n                count+=1;\r\n                x-=1;\r\n                arr = [...arr, value]\r\n            } else {\r\n                // console.log(squares[x][squareValue.j].value);\r\n                if (value.value !== 0) {\r\n                    twoHeadBlock = twoHeadBlock && true;\r\n                    // console.log('Block 1');\r\n                } else {\r\n                    twoHeadBlock = false;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        // console.log('Count col', count);\r\n        return (count >= 5) && !twoHeadBlock ? arr : [];\r\n    }\r\n\r\n    static checkRow = (squareValue, squares) => {\r\n        // console.log('Square value', squareValue);\r\n        let twoHeadBlock = false;\r\n        let count = 1;\r\n        let x = squareValue.j + 1;\r\n        let arr = [];\r\n        while (x < 20) {\r\n\r\n            const value = squares[squareValue.i][x];\r\n            if (squareValue.isSameValue(value)) {\r\n                count+=1;\r\n                x+=1;\r\n                arr = [...arr, value]\r\n            } else {\r\n                // console.log(value);\r\n                if (value.value !== 0) {\r\n                    twoHeadBlock = true;\r\n                    // console.log('Block 1');\r\n                }\r\n                break;\r\n            }\r\n        }\r\n\r\n        x = squareValue.j - 1;\r\n        while (x >= 0) {\r\n\r\n\r\n            const value = squares[squareValue.i][x];\r\n            if (squareValue.isSameValue(value)) {\r\n                count+=1;\r\n                x-=1;\r\n                arr = [...arr, value]\r\n            } else {\r\n                // console.log(value);\r\n                if (value.value !== 0) {\r\n                    twoHeadBlock = twoHeadBlock && true;\r\n                    // console.log('Block 1');\r\n                } else {\r\n                    twoHeadBlock = false;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n\r\n        // console.log('Count row', count);\r\n        return (count >= 5) && !twoHeadBlock ? arr : [];\r\n    }\r\n\r\n    static checkMainDiagonal = (squareValue, squares) => {\r\n        let twoHeadBlock = false;\r\n        let count = 1;\r\n        let x = squareValue.i + 1;\r\n        let y = squareValue.j + 1;\r\n        let arr = [];\r\n        while (x < 20 && y < 20) {\r\n\r\n            const value = squares[x][y];\r\n            if (squareValue.isSameValue(value)) {\r\n                count += 1;\r\n                x+=1;\r\n                y+=1;\r\n                arr = [...arr, value];\r\n            } else {\r\n                // console.log(value);\r\n                if (value.value !== 0) {\r\n                    twoHeadBlock = true;\r\n                    // console.log('Block 1');\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        x = squareValue.i - 1;\r\n        y = squareValue.j - 1;\r\n        while (x >= 0 && y >= 0) {\r\n\r\n            const value = squares[x][y];\r\n            if (squareValue.isSameValue(value)) {\r\n                count += 1;\r\n                x-=1;\r\n                y-=1;\r\n                arr = [...arr, value];\r\n            } else {\r\n                // console.log(value);\r\n                if (value.value !== 0) {\r\n                    twoHeadBlock = twoHeadBlock && true;\r\n                    // console.log('Block 1');\r\n                } else {\r\n                    twoHeadBlock = false;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        // console.log('Check Main Diagonal', count);\r\n\r\n        return (count >= 5) && !twoHeadBlock ? arr : [];\r\n    }\r\n\r\n    static checkSubDiagonal = (squareValue, squares) => {\r\n        let twoHeadBlock = false;\r\n        let count = 1;\r\n        let x = squareValue.i + 1;\r\n        let y = squareValue.j - 1;\r\n        let arr = [];\r\n        while (x < 20 && y >= 0) {\r\n            const value = squares[x][y];\r\n            if (squareValue.isSameValue(value)) {\r\n                count += 1;\r\n                x+=1;\r\n                y-=1;\r\n                arr = [...arr, value];\r\n            } else {\r\n                // console.log(value);\r\n                if (value.value !== 0) {\r\n                    twoHeadBlock = true;\r\n                    // console.log('Block 1');\r\n                } else {\r\n                    twoHeadBlock = false;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        x = squareValue.i - 1;\r\n        y = squareValue.j + 1;\r\n        while (x >= 0 && y < 20) {\r\n            const value = squares[x][y];\r\n            if (squareValue.isSameValue(value)) {\r\n                count += 1;\r\n                x-=1;\r\n                y+=1;\r\n                arr = [...arr, value];\r\n            } else {\r\n                // console.log(value);\r\n                if (value.value !== 0) {\r\n                    twoHeadBlock = twoHeadBlock && true;\r\n                    // console.log('Block 1');\r\n                } else {\r\n                    twoHeadBlock = false;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        // console.log('Check Sub Diagonal', count);\r\n        // console.log('twoHeadBlock', twoHeadBlock);\r\n        return (count >= 5) && !twoHeadBlock ? arr : [];\r\n    }\r\n}\r\nexport default Checker;","import React from 'react';\r\n\r\nconst squareContext = React.createContext({\r\n    // eslint-disable-next-line no-unused-vars\r\n    onSquareClick: (square) => { },\r\n    value: null\r\n});\r\n\r\nexport default squareContext;","import React from 'react';\r\nimport './square.css';\r\nimport SquareContext from '../../contexts/square-context';\r\n\r\nclass Square extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n        };\r\n    }\r\n\r\n    render() {\r\n        // console.log(this.props.value)\r\n        // console.log(this.props.squareObj);\r\n        const { value, isSelected, squareObj } = this.props;\r\n        const style = isSelected ? {\r\n            'backgroundColor': 'green'\r\n        } : null;\r\n        let mark = '';\r\n        if (value === 1) {\r\n            mark = 'X';\r\n        } else if (value === 2) {\r\n            mark = 'O';\r\n        }\r\n\r\n        return (\r\n            <SquareContext.Consumer>\r\n                {context =>\r\n                    <button\r\n                        type=\"button\"\r\n                        className=\"square\"\r\n                        style={style}\r\n                        onClick={() => context.onSquareClick(squareObj)}\r\n                    >\r\n                        {mark}\r\n                    </button>\r\n                }\r\n            </SquareContext.Consumer>\r\n        );\r\n    }\r\n}\r\nexport default Square;","import React from 'react';\r\nimport Square from '../game-square/square';\r\nimport './board.css';\r\n\r\n\r\nclass Board extends React.Component {\r\n\r\n    renderSquare = (square) => {\r\n        return <Square\r\n            isSelected={square.isSelected}\r\n            squareObj={square}\r\n            value={square.value} key={square.key}\r\n        />;\r\n    }\r\n\r\n    renderRow = (squareRow) => {\r\n        return (\r\n            <div className='board-row' key={`row${squareRow[0].key}`}>\r\n                <div>\r\n                    {squareRow.map(square => this.renderSquare(square))}\r\n                </div>\r\n                <br />\r\n            </div>\r\n        )\r\n    }\r\n\r\n    render() {\r\n        const { player, squares } = this.props;\r\n        return (\r\n            <div>\r\n\r\n                <div className=\"board\">\r\n                    <h1>{player === 1 ? 'X' : 'O'}</h1>\r\n                </div>\r\n                <div>\r\n                    {squares.map(squareRow => this.renderRow(squareRow))}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default Board;","import React from 'react';\r\nimport './history-board.css';\r\n\r\nconst historyBoard = props => {\r\n    let arr = [];\r\n    if (!props.arrange) {\r\n        for (let i = props.step; i >=0; i -= 1) {\r\n            arr = [...arr, i];\r\n        }\r\n    }else{\r\n        for (let i = 0; i <= props.step; i += 1) {\r\n            arr = [...arr, i];\r\n        }\r\n    }\r\n    \r\n    // console.log(arr);\r\n    return arr.map((step) => {\r\n        const style = props.current === step ? {\r\n            'backgroundColor': 'green'\r\n        } : null;\r\n        return <li key={step}>\r\n            <button className=\"button\" type=\"button\" style={style} onClick={() => props.backToStep(step)}>Jump to {step}</button>\r\n        </li>\r\n    }\r\n\r\n\r\n    )\r\n}\r\n\r\nexport default historyBoard;","import React, { Component } from 'react';\nimport SquareValue from './utility/squareObj';\nimport Checker from './utility/gameChecker';\nimport Board from './components/game-board/board';\nimport './App.css';\nimport SquareContext from './contexts/square-context';\nimport HistoryBoard from './components/history-board/history-board';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    const boardSquares = this.getBlankBoard();\n    this.state = {\n      currentStep: 0,\n      history: [],\n      boardSquares,\n      player: 1,\n      win: false,\n      arrangeAsend: true,\n    }\n  }\n\n  getBlankBoard = () => {\n    const arr = new Array(20).fill(0);\n    for (let i = 0; i < arr.length; i += 1) {\n      arr[i] = new Array(20);\n      for (let j = 0; j < arr[i].length; j += 1) {\n        arr[i][j] = new SquareValue(0, i * 10 * 2 + j, i, j);\n      }\n    }\n    return arr;\n  }\n\n  init = () => {\n    const boardSquares = this.getBlankBoard();\n    // console.log(boardSquares);\n    this.setState()\n    this.setState({\n      boardSquares,\n      player: 1,\n      win: false,\n      history: []\n    });\n  }\n\n  checkWin = (square) => {\n    // console.log('square checkwin', square);\n    // Checker.check(square, this.state.squares);\n    const { boardSquares } = this.state;\n    const result = Checker.check(square, boardSquares);\n\n    if (result.length > 0) {\n      const newBoard = boardSquares.map(squareRow => {\n        squareRow.map(square1 => {\n          const sq = square1;\n          sq.isSelected = false;\n          result.forEach(r => {\n            if (sq.equal(r)) {\n              sq.select();\n            }\n          })\n          return sq;\n        })\n        return squareRow;\n\n      })\n      this.setState({\n        win: true,\n        boardSquares: newBoard\n      })\n    }\n  }\n\n  handleClick = (square) => {\n    const { boardSquares } = this.state;\n    const squaresBoard = boardSquares.map((squareRow) => {\n      squareRow.map(squareM => {\n        const s = squareM;\n        s.isSelected = false;\n        if (squareM.equal(square)) {\n          // console.log('map', squareM);\n          if (s.value === 0) {\n            const { player, currentStep, history } = this.state;\n            s.value = player;\n            s.select();\n            this.checkWin(s);\n            let newHis = [];\n            if (currentStep < history.length) {\n              newHis = history.slice(0, currentStep)\n            } else {\n              newHis = [...history]\n            }\n            this.setState({\n              history: [...newHis, {\n                location: square.key,\n                player\n              }],\n              player: player === 1 ? 2 : 1,\n              currentStep: currentStep + 1,\n            });\n            // console.log('player', this.state.player)\n          }\n        }\n        return s;\n      })\n      return squareRow;\n    })\n\n    this.setState({ boardSquares: squaresBoard });\n  }\n\n  backToStep = (step) => {\n    const newBoardHistory = this.getBlankBoard();\n    const { history } = this.state;\n    for (let i = 0; i < step; i += 1) {\n      const lo = history[i].location;\n      newBoardHistory.map(boardRow => {\n        boardRow.map(square => {\n          const newSquare = square;\n          newSquare.isSelected = false;\n          if (newSquare.key === lo) {\n            newSquare.value = history[i].player;\n            newSquare.select();\n          }\n          return newSquare;\n        })\n        return boardRow;\n      })\n    }\n    // console.log(step);\n    let player = 1;\n    if (step !== 0) {\n      player = history[step - 1].player === 1 ? 2 : 1;\n    }\n    this.setState({\n      boardSquares: newBoardHistory,\n      player,\n      currentStep: step\n    })\n  }\n\n  back = () => {\n    const { currentStep } = this.state;\n    if (currentStep > 0) {\n      this.backToStep(currentStep - 1);\n    }\n  }\n\n  forward = () => {\n\n    const { currentStep, history } = this.state;\n    if (currentStep < history.length) {\n      this.backToStep(currentStep + 1);\n    }\n  }\n\n  render = () => {\n    const { win, player, boardSquares, currentStep, history, arrangeAsend } = this.state;\n    return (\n      <div className=\"game\">\n        {win ? <div>\n          <h1>Congratulation Player {player === 1 ? 'O' : 'X'}</h1>\n        </div>\n          : null\n        }\n        <button type=\"button\" onClick={this.init}>Play again</button>\n        <SquareContext.Provider value={\n          {\n            value: 1,\n            onSquareClick: (square) => this.handleClick(square)\n          }\n        }>\n          <Board squares={boardSquares}\n            win={win}\n            player={player}\n          />\n        </SquareContext.Provider>\n        {\n          win === false ?\n            <ol>\n              <HistoryBoard current={currentStep} step={history.length} arrange={arrangeAsend} backToStep={(step) => this.backToStep(step)} />\n            </ol> : null\n        }\n        <ol>\n          <li>\n            <button type=\"button\" onClick={this.back}> Step back </button>\n            <button type=\"button\" onClick={this.forward}> Step forward </button>\n          </li>\n        </ol>\n        <ol>\n          <li>\n            <button type=\"button\" onClick={() => this.setState({ arrangeAsend: true })}> Ascending </button>\n            <button type=\"button\" onClick={() => this.setState({ arrangeAsend: false })}> Descending </button>\n          </li>\n        </ol>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}